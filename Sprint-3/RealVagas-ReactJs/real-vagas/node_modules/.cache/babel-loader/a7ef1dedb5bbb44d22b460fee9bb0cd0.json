{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\henri\\\\Desktop\\\\Senai-CodeCreators\\\\Sprint-3\\\\RealVagas-ReactJs\\\\real-vagas\\\\src\\\\components\\\\InputCurrency\\\\InputMoney.tsx\";\nimport React, { useCallback } from 'react';\nconst VALID_FIRST = /^[1-9]{1}$/;\nconst VALID_NEXT = /^[0-9]{1}$/;\nconst DELETE_KEY_CODE = 8;\n\nconst CurrencyInput = ({\n  className = '',\n  max = Number.MAX_SAFE_INTEGER,\n  onValueChange,\n  style = {},\n  value\n}) => {\n  const valueAbsTrunc = Math.trunc(Math.abs(value));\n\n  if (value !== valueAbsTrunc || !Number.isFinite(value) || Number.isNaN(value)) {\n    throw new Error(`invalid value property`);\n  }\n\n  const handleKeyDown = useCallback(e => {\n    const {\n      key,\n      keyCode\n    } = e;\n\n    if (value === 0 && !VALID_FIRST.test(key) || value !== 0 && !VALID_NEXT.test(key) && keyCode !== DELETE_KEY_CODE) {\n      return;\n    }\n\n    const valueString = value.toString();\n    let nextValue;\n\n    if (keyCode !== DELETE_KEY_CODE) {\n      const nextValueString = value === 0 ? key : `${valueString}${key}`;\n      nextValue = Number.parseInt(nextValueString, 10);\n    } else {\n      const nextValueString = valueString.slice(0, -1);\n      nextValue = nextValueString === '' ? 0 : Number.parseInt(nextValueString, 10);\n    }\n\n    if (nextValue > max) {\n      return;\n    }\n\n    onValueChange(nextValue);\n  }, [max, onValueChange, value]);\n  const handleChange = useCallback(() => {// DUMMY TO AVOID REACT WARNING\n  }, []);\n  const valueDisplay = (value / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n  return /*#__PURE__*/React.createElement(\"input\", {\n    inputMode: \"numeric\",\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n    style: style,\n    value: valueDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default CurrencyInput;","map":{"version":3,"sources":["C:/Users/henri/Desktop/Senai-CodeCreators/Sprint-3/RealVagas-ReactJs/real-vagas/src/components/InputCurrency/InputMoney.tsx"],"names":["React","useCallback","VALID_FIRST","VALID_NEXT","DELETE_KEY_CODE","CurrencyInput","className","max","Number","MAX_SAFE_INTEGER","onValueChange","style","value","valueAbsTrunc","Math","trunc","abs","isFinite","isNaN","Error","handleKeyDown","e","key","keyCode","test","valueString","toString","nextValue","nextValueString","parseInt","slice","handleChange","valueDisplay","toLocaleString","currency"],"mappings":";AAAA,OAAOA,KAAP,IAAkDC,WAAlD,QAAqE,OAArE;AAUA,MAAMC,WAAW,GAAG,YAApB;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,eAAe,GAAG,CAAxB;;AAEA,MAAMC,aAAwB,GAAG,CAAC;AAChCC,EAAAA,SAAS,GAAG,EADoB;AAEhCC,EAAAA,GAAG,GAAGC,MAAM,CAACC,gBAFmB;AAGhCC,EAAAA,aAHgC;AAIhCC,EAAAA,KAAK,GAAG,EAJwB;AAKhCC,EAAAA;AALgC,CAAD,KAM3B;AACJ,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASJ,KAAT,CAAX,CAAtB;;AACA,MAAIA,KAAK,KAAKC,aAAV,IAA2B,CAACL,MAAM,CAACS,QAAP,CAAgBL,KAAhB,CAA5B,IAAsDJ,MAAM,CAACU,KAAP,CAAaN,KAAb,CAA1D,EAA+E;AAC7E,UAAM,IAAIO,KAAJ,CAAW,wBAAX,CAAN;AACD;;AACD,QAAMC,aAAa,GAAGnB,WAAW,CAC9BoB,CAAD,IAA4C;AAC1C,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmBF,CAAzB;;AACA,QACGT,KAAK,KAAK,CAAV,IAAe,CAACV,WAAW,CAACsB,IAAZ,CAAiBF,GAAjB,CAAjB,IACCV,KAAK,KAAK,CAAV,IAAe,CAACT,UAAU,CAACqB,IAAX,CAAgBF,GAAhB,CAAhB,IAAwCC,OAAO,KAAKnB,eAFvD,EAGE;AACA;AACD;;AACD,UAAMqB,WAAW,GAAGb,KAAK,CAACc,QAAN,EAApB;AACA,QAAIC,SAAJ;;AACA,QAAIJ,OAAO,KAAKnB,eAAhB,EAAiC;AAC/B,YAAMwB,eAAuB,GAAGhB,KAAK,KAAK,CAAV,GAAcU,GAAd,GAAqB,GAAEG,WAAY,GAAEH,GAAI,EAAzE;AACAK,MAAAA,SAAS,GAAGnB,MAAM,CAACqB,QAAP,CAAgBD,eAAhB,EAAiC,EAAjC,CAAZ;AACD,KAHD,MAGO;AACL,YAAMA,eAAe,GAAGH,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAxB;AACAH,MAAAA,SAAS,GAAGC,eAAe,KAAK,EAApB,GAAyB,CAAzB,GAA6BpB,MAAM,CAACqB,QAAP,CAAgBD,eAAhB,EAAiC,EAAjC,CAAzC;AACD;;AACD,QAAID,SAAS,GAAGpB,GAAhB,EAAqB;AACnB;AACD;;AACDG,IAAAA,aAAa,CAACiB,SAAD,CAAb;AACD,GAtB8B,EAuB/B,CAACpB,GAAD,EAAMG,aAAN,EAAqBE,KAArB,CAvB+B,CAAjC;AAyBA,QAAMmB,YAAY,GAAG9B,WAAW,CAAC,MAAM,CACrC;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAGA,QAAM+B,YAAY,GAAG,CAACpB,KAAK,GAAG,GAAT,EAAcqB,cAAd,CAA6B,OAA7B,EAAsC;AACzDtB,IAAAA,KAAK,EAAE,UADkD;AAEzDuB,IAAAA,QAAQ,EAAE;AAF+C,GAAtC,CAArB;AAKA,sBACE;AACE,IAAA,SAAS,EAAC,SADZ;AAEE,IAAA,QAAQ,EAAEH,YAFZ;AAGE,IAAA,SAAS,EAAEX,aAHb;AAIE,IAAA,KAAK,EAAET,KAJT;AAKE,IAAA,KAAK,EAAEqB,YALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CArDD;;AAuDA,eAAe3B,aAAf","sourcesContent":["import React, { CSSProperties, FC, KeyboardEvent, useCallback } from 'react';\r\n\r\ninterface Props {\r\n  className?: string;\r\n  max?: number;\r\n  onValueChange: (value: number) => void;\r\n  style?: CSSProperties;\r\n  value: number;\r\n}\r\n\r\nconst VALID_FIRST = /^[1-9]{1}$/;\r\nconst VALID_NEXT = /^[0-9]{1}$/;\r\nconst DELETE_KEY_CODE = 8;\r\n\r\nconst CurrencyInput: FC<Props> = ({\r\n  className = '',\r\n  max = Number.MAX_SAFE_INTEGER,\r\n  onValueChange,\r\n  style = {},\r\n  value,\r\n}) => {\r\n  const valueAbsTrunc = Math.trunc(Math.abs(value));\r\n  if (value !== valueAbsTrunc || !Number.isFinite(value) || Number.isNaN(value)) {\r\n    throw new Error(`invalid value property`);\r\n  }\r\n  const handleKeyDown = useCallback(\r\n    (e: KeyboardEvent<HTMLDivElement>): void => {\r\n      const { key, keyCode } = e;\r\n      if (\r\n        (value === 0 && !VALID_FIRST.test(key)) ||\r\n        (value !== 0 && !VALID_NEXT.test(key) && keyCode !== DELETE_KEY_CODE)\r\n      ) {\r\n        return;\r\n      }\r\n      const valueString = value.toString();\r\n      let nextValue: number;\r\n      if (keyCode !== DELETE_KEY_CODE) {\r\n        const nextValueString: string = value === 0 ? key : `${valueString}${key}`;\r\n        nextValue = Number.parseInt(nextValueString, 10);\r\n      } else {\r\n        const nextValueString = valueString.slice(0, -1);\r\n        nextValue = nextValueString === '' ? 0 : Number.parseInt(nextValueString, 10);\r\n      }\r\n      if (nextValue > max) {\r\n        return;\r\n      }\r\n      onValueChange(nextValue);\r\n    },\r\n    [max, onValueChange, value]\r\n  );\r\n  const handleChange = useCallback(() => {\r\n    // DUMMY TO AVOID REACT WARNING\r\n  }, []);\r\n  const valueDisplay = (value / 100).toLocaleString('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n\r\n  return (\r\n    <input\r\n      inputMode=\"numeric\"\r\n      onChange={handleChange}\r\n      onKeyDown={handleKeyDown}\r\n      style={style}\r\n      value={valueDisplay}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CurrencyInput;"]},"metadata":{},"sourceType":"module"}